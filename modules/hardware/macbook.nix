# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  console.keyMap = "it";
  programs.hyprland.enable = true;

  boot.kernelParams = [
     "intel_pstate=active"
     "acpi_mask_gpe=0x15"
    "fsck.mode=skip"
    "quiet"
    "loglevel=0"
    "rd.systemd.show_status=false"
    "nowatchdog"
    "mitigations=off"
    "libahci.ignore_sss=1"
  ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ "i915" ];
  boot.kernelModules = [ "kvm-intel" "wl" ];
  boot.extraModulePackages = [ config.boot.kernelPackages.broadcom_sta ];

  nix.settings = {
    substituters = ["https://hyprland.cachix.org"];
    trusted-public-keys = ["hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="];
  };

  nixpkgs.config.packageOverrides = pkgs: {
    vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
  };
    hardware.opengl = {
      driSupport = true;
      driSupport32Bit = true;
      extraPackages = with pkgs; [
        vaapiIntel
        intel-media-driver
      ];
    };
    environment.sessionVariables.LIBVA_DRIVER_NAME = "i965";

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/068efd3a-9b1c-4ac0-91b9-c0e2ea0a6118";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/67E3-17ED";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s20u1u4.useDHCP = lib.mkDefault true;

  services = {
# Power management.
    logind = {
      lidSwitch = "ignore";
      extraConfig = ''
        HandlePowerKey=ignore
        '';
    };
    acpid = {
      enable = true;
      lidEventCommands =
        ''
        export PATH=$PATH:/run/current-system/sw/bin

        lid_state=$(cat /proc/acpi/button/lid/LID0/state | awk '{print $NF}')
        if [ $lid_state = "closed" ]; then
# Set brightness to zero
          echo 0  > /sys/class/backlight/acpi_video0/brightness
        else
# Reset the brightness
          echo 50  > /sys/class/backlight/acpi_video0/brightness
            fi
            '';

      powerEventCommands =
        ''
        systemctl suspend
        '';
    };
  };


  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
